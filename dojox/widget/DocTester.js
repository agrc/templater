//>>built
define("dojox/widget/DocTester",["dojo","dijit","dojox","dojo/require!dojo/string,dijit/_Widget,dijit/_Templated,dojox/form/BusyButton,dojox/testing/DocTest"],function(e,t,i){e.provide("dojox.widget.DocTester"),e.require("dojo.string"),e.require("dijit._Widget"),e.require("dijit._Templated"),e.require("dojox.form.BusyButton"),e.require("dojox.testing.DocTest"),e.declare("dojox.widget.DocTester",[t._Widget,t._Templated],{templateString:e.cache("dojox.widget","DocTester/DocTester.html",'<div dojoAttachPoint="domNode" class="dojoxDocTester">\n	<div dojoAttachPoint="containerNode"></div>\n	<button dojoType="dojox.form.BusyButton" busyLabel="Testing..." dojoAttachPoint="runButtonNode">Run tests</button>\n	<button dojoType="dijit.form.Button" dojoAttachPoint="resetButtonNode" style="display:none;">Reset</button>\n	<span>\n		<span dojoAttachPoint="numTestsNode">0</span> tests,\n		<span dojoAttachPoint="numTestsOkNode">0</span> passed,\n		<span dojoAttachPoint="numTestsNokNode">0</span> failed\n	</span>\n</div>'),widgetsInTemplate:!0,_fillContent:function(t){var a=t.innerHTML;this.doctests=new i.testing.DocTest,this.tests=this.doctests.getTestsFromString(this._unescapeHtml(a));for(var o=e.map(this.tests,"return item.line-1"),n=a.split("\n"),r='<div class="actualResult">FAILED, actual result was: <span class="result"></span></div>',s='<pre class="testCase testNum0 odd">',l=0;l<n.length;l++){var d=e.indexOf(o,l);if(d>0&&-1!=d){var h=d%2?"even":"odd";s+=r,s+='</pre><pre class="testCase testNum'+d+" "+h+'">'}s+=n[l].replace(/^\s+/,"")+"\n"}s+=r+"</pre>",this.containerNode.innerHTML=s},postCreate:function(){this.inherited("postCreate",arguments),e.connect(this.runButtonNode,"onClick",e.hitch(this,"runTests")),e.connect(this.resetButtonNode,"onClick",e.hitch(this,"reset")),this.numTestsNode.innerHTML=this.tests.length},runTests:function(){for(var t={ok:0,nok:0},i=0;i<this.tests.length;i++){var a=this.doctests.runTest(this.tests[i].commands,this.tests[i].expectedResult);if(e.query(".testNum"+i,this.domNode).addClass(a.success?"resultOk":"resultNok"),a.success)t.ok++,this.numTestsOkNode.innerHTML=t.ok;else{t.nok++,this.numTestsNokNode.innerHTML=t.nok;var o=e.query(".testNum"+i+" .actualResult",this.domNode)[0];e.style(o,"display","inline"),e.query(".result",o)[0].innerHTML=e.toJson(a.actualResult)}}this.runButtonNode.cancel(),e.style(this.runButtonNode.domNode,"display","none"),e.style(this.resetButtonNode.domNode,"display","")},reset:function(){e.style(this.runButtonNode.domNode,"display",""),e.style(this.resetButtonNode.domNode,"display","none"),this.numTestsOkNode.innerHTML="0",this.numTestsNokNode.innerHTML="0",e.query(".actualResult",this.domNode).style("display","none"),e.query(".testCase",this.domNode).removeClass("resultOk").removeClass("resultNok")},_unescapeHtml:function(e){return e=String(e).replace(/&amp;/gm,"&").replace(/&lt;/gm,"<").replace(/&gt;/gm,">").replace(/&quot;/gm,'"')}})});//# sourceMappingURL=DocTester.js.map